// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebArticleLibrary.Model;

namespace WebArticleLibrary.Model.Migrations
{
    [DbContext(typeof(ArticleLibraryContext))]
    partial class ArticleLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebArticleLibrary.Model.Amendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("InsertDate");

                    b.Property<bool>("Resolved");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Amendment");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToId");

                    b.Property<int>("AuthorId");

                    b.Property<byte[]>("Content")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<byte[]>("ReviewedContent");

                    b.Property<int>("Status");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.ArticleHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("NewValue");

                    b.Property<string>("Object")
                        .IsRequired();

                    b.Property<int?>("ObjectId");

                    b.Property<int>("ObjectType");

                    b.Property<string>("OldValue");

                    b.HasKey("ID");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("ArticleHistory");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ConfirmationId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("NewEmail");

                    b.Property<DateTime?>("NewEmailExpirationDate");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Photo");

                    b.Property<DateTime?>("ResetPasswordExpirationDate");

                    b.Property<bool>("ShowPrivateInfo");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<byte[]>("Content")
                        .IsRequired();

                    b.Property<DateTime>("InsertDate");

                    b.Property<int?>("ResponseToId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponseToId");

                    b.ToTable("UserComment");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int?>("AssignedToId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("Status");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int?>("UserCommentId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserCommentId");

                    b.ToTable("UserComplaint");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserEstimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("AuthorId");

                    b.Property<int>("Estimate");

                    b.Property<DateTime>("InsertDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserEstimate");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleHistoryId");

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("RecipientId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ArticleHistoryId");

                    b.HasIndex("RecipientId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("WebArticleLibrary.Model.Amendment", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.Article", "Article")
                        .WithMany("Amendments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("Amendments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.Article", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.User", "AssignedTo")
                        .WithMany("AssignedArticles")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.ArticleHistory", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.Article", "Article")
                        .WithMany("ArticleHistory")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("ArticleHistory")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserComment", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.Article", "Article")
                        .WithMany("UserComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("UserComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebArticleLibrary.Model.UserComment", "ResponseTo")
                        .WithMany("RelatedComments")
                        .HasForeignKey("ResponseToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserComplaint", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.Article", "Article")
                        .WithMany("UserComplaints")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "AssignedTo")
                        .WithMany("AssignedUserComplaints")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("UserComplaints")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebArticleLibrary.Model.UserComment", "UserComment")
                        .WithMany("UserComplaints")
                        .HasForeignKey("UserCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserEstimate", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.Article", "Article")
                        .WithMany("UserEstimates")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "Author")
                        .WithMany("UserEstimates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebArticleLibrary.Model.UserNotification", b =>
                {
                    b.HasOne("WebArticleLibrary.Model.ArticleHistory", "ArticleHistory")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ArticleHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebArticleLibrary.Model.User", "Recipient")
                        .WithMany("UserNotifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
